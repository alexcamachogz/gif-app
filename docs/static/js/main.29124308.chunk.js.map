{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGif.js","GifApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","className","onSubmit","e","preventDefault","trim","length","cats","type","value","placeholder","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGif","GifApp","categories","href","ReactDOM","render","document","getElementById"],"mappings":"6LAkCeA,EA/BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAazC,OACE,qBAAKC,UAAU,YAAf,SACE,sBAAMC,SAVW,SAACC,GACpBA,EAAEC,iBACEL,EAAWM,OAAOC,OAAS,IAC7BT,GAAc,SAAAU,GAAI,OAAKR,GAAL,mBAAoBQ,OACtCP,EAAc,MAMd,SACE,uBACEQ,KAAK,OACLC,MAAOV,EACPW,YAAY,2BACZC,SAlBkB,SAACR,GACzBH,EAAcG,EAAES,OAAOH,e,+BCNdI,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACJ,gCACD,mCACTC,EAHc,UACJ,gCADI,qBAGeC,UACjCH,GAJkB,6BAEL,oCAFK,SAMDI,MAAMF,GANL,cAMdG,EANc,gBAOGA,EAAKC,OAPR,uBAOZC,EAPY,EAOZA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZlB,kBAebM,GAfa,4CAAH,sDCENO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAInC,OACE,sBAAKf,UAAU,yCAAf,UACE,qBAAK6B,IAAKd,EAAKe,IAAKL,IACpB,4BAAIA,QCJGM,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECFd,SAACA,GAAc,IAAD,EACbhB,mBAAS,CACjCuB,KAAM,GACNY,SAAS,IAH4B,mBAChCC,EADgC,KACzBC,EADyB,KAevC,OATAC,qBAAU,WACRvB,EAAOC,GAAUuB,MAAK,SAAAV,GACpBQ,EAAS,CACPd,KAAMM,EACNM,SAAS,SAGZ,CAACnB,IAEGoB,EDZ2BI,CAAYxB,GAAhCa,EADyB,EAC/BN,KAAcY,EADiB,EACjBA,QACtB,OACE,qCACE,6BAAKnB,IACJmB,GAAW,2CACZ,qBAAKhC,UAAU,YAAf,SAEI0B,EAAOJ,KAAI,SAAAC,GAAG,OACZ,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEgBnBc,EA1BA,WAAO,IAAD,EACiBzC,mBAAS,CAAC,cAD3B,mBACZ0C,EADY,KACA3C,EADA,KAGnB,OACE,qCACE,sBAAKI,UAAU,kBAAf,UACE,oBAAIA,UAAU,YAAd,oCAEA,oBAAGA,UAAU,cAAb,wBACa,mBAAGA,UAAU,WAAWwC,KAAK,qBAA7B,0BAGf,cAAC,EAAD,CAAa5C,cAAeA,IAC5B,6BACG2C,EAAWjB,KAAI,SAAAT,GACd,OAAO,cAAC,EAAD,CAELA,SAAUA,GADLA,Y,MCdjB4B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.29124308.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('')\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value)\n  }\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    if (inputValue.trim().length > 2) {\n      setCategories(cats => [inputValue, ...cats])\n      setInputValue('')\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={inputValue}\n          placeholder=\"Buscar por palabra clave\"\n          onChange={handleInputChange}\n        />\n      </form>\n    </div>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n}\n\nexport default AddCategory\n","export const getGif = async (category) => {\n  const baseUrl = 'https://api.giphy.com/v1/gifs'\n  const apiKey = 'artHio846tqJPbEAbRD6Q5IDctGhnAAN'\n  const url = `${baseUrl}/search?q=${encodeURI(\n    category)}&limit=10&api_key=${apiKey}`\n\n  const resp = await fetch(url)\n  const { data } = await resp.json()\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    }\n  })\n  return gifs\n}","import React from 'react'\n\nexport const GifGridItem = ({ title, url }) => {\n\n  // console.log({ id, title, url })\n\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title}/>\n      <p>{title}</p>\n    </div>\n  )\n}","import React from 'react'\nimport { useFetchGif } from '../hooks/useFetchGif'\nimport { GifGridItem } from './GifGridItem'\n// import PropTypes from 'prop-types'\n\nexport const GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGif(category)\n  return (\n    <>\n      <h3>{category}</h3>\n      {loading && <p>Loading...</p>}\n      <div className=\"card-grid\">\n        {\n          images.map(img => (\n            <GifGridItem key={img.id} {...img}/>\n          ))\n        }\n      </div>\n    </>\n  )\n}","import { useState, useEffect } from 'react'\nimport { getGif } from '../helpers/getGifs'\n\nexport const useFetchGif = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  })\n\n  useEffect(() => {\n    getGif(category).then(images => {\n      setState({\n        data: images,\n        loading: false,\n      })\n    })\n  }, [category])\n\n  return state\n}","import React, { useState } from 'react'\nimport AddCategory from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid'\n\nconst GifApp = () => {\n  const [categories, setCategories] = useState(['One Piece'])\n\n  return (\n    <>\n      <div className=\"title-container\">\n        <h2 className=\"app-title\">☀️ GIPHY\n          API</h2>\n        <p className=\"attribution\">\n          Powered by <a className=\"att-link\" href=\"https://giphy.com/\"> Giphy</a>\n        </p>\n      </div>\n      <AddCategory setCategories={setCategories}/>\n      <ol>\n        {categories.map(category => {\n          return <GifGrid\n            key={category}\n            category={category}\n          />\n        })\n        }\n      </ol>\n    </>\n  )\n}\n\nexport default GifApp","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport GifApp from './GifApp'\nimport 'animate.css'\n\nReactDOM.render(\n  <GifApp/>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}